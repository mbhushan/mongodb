CHAPTER-1 Getting Started
==========================
The key differences between MongoDB’s document-oriented approach and a traditional relational database are:
1. MongoDB does not support joins.
2. MongoDB does not support transactions. It does have some support for atomic
operations, however.
3. MongoDB schemas are flexible. Not all documents in a collection must adhere to
the same schema.


CHAPTER-2 READING n WRITING to MONGO PYTHON
============================================
Table 2-1. Comparison of SQL/RDBMS and MongoDB Concepts and Terms
Concept,     SQL         MongoDB
One User,    One Row     One Document
All Users,   Users Table Users Collection
One Username Per User (1-to-1), Username Column, Username Property
Many Emails Per User (1-to-many), SQL JOIN with Emails Table, Embed relevant email doc in User Document
Many Items Owned by Many Users (many-to-many), SQL JOIN with Items Table, Programmatically Join with Items Collection
Note that we don’t have to tell MongoDB to create our collection “users” before we insert to it.
# dbh.usrs is a typo, we mean dbh.users! Unlike an RDBMS, MongoDB won't
# protect you from this class of mistake.
dbh.usrs.insert(user_doc)
A MongoDB ObjectId is a
96-bit value which is expected to have a very high probability of being unique when created.
By default, the PyMongo driver performs asynchronous writes. Write operations include insert, update, remove and findAndModify.
one common example where asynchronous writes may make sense is when you are writing non-critical logs or analytics data to MongoDB from your application.
# safe=True ensures that your write
# will succeed or an exception will be thrown
dbh.users.insert(user_doc, safe=True)
pyMongo makes it easy to specify how many nodes you would like your write to be replicated to before returning success. 
You simply set a parameter named “w” to the number of servers in each write method call.
For example:
# w=2 means the write will not succeed until it has
# been written to at least 2 servers in a replica set.
dbh.users.insert(user_doc, w=2)
Note that passing any value of “w” to a write method in PyMongo implies setting “safe=True” also.
Now imagine you wish to find all documents in the users collection which have a firstname property set to “jane” and print out their email addresses. MongoDB will return a Cursor object for us, to stream the results.

# Return all user with firstname "jane" sorted
# in descending order by birthdate (ie youngest first)
users = dbh.users.find({"firstname":"jane"}).sort(("dateofbirth", pymongo.DESCENDING))
for user in users:
print user.get("email")

# Return all user with firstname "jane" sorted
# in descending order by birthdate (ie youngest first)
users = dbh.users.find({"firstname":"jane"},
sort=[("dateofbirth", pymongo.DESCENDING)])
for user in users:
print user.get("email")

# Return at most 10 users sorted by score in descending order
# This may be used as a "top 10 users highscore table"
users = dbh.users.find().sort(("score", pymongo.DESCENDING)).limit(10)
for user in users:
print user.get("username"), user.get("score", 0)

# Delete all documents in user collection
dbh.users.remove(None, safe=True)
# Delete all documents in user collection with score 1
dbh.users.remove({"score":1}, safe=True)


# even if every document in your collection has a score of 0,
# only the first matched document will have its "flagged" property set to True.
dbh.users.update({"score":0},{"$set":{"flagged":True}}, safe=True)
# once we supply the "multi=True" parameter, all matched documents
# will be updated
dbh.users.update({"score":0},{"$set":{"flagged":True}}, multi=True, safe=True)


CHAPTER-3 COMMON MONGODB n PYTHON PATTERNS
==================================================================================
my_document = {
"name":"foo document",
"data":{"name":"bar document"}
}

user_doc = {
"username":"foouser",
"twitter":{
"username":"footwitter",
"password":"secret",
"email":"twitter@example.com"
},
"facebook":{
"username":"foofacebook",
"password":"secret",
"email":"facebook@example.com"
},
"irc":{
"username":"fooirc",
"password":"secret",
}
}

user_doc = dbh.users.find_one({"facebook.username":"foofacebook"})
# update modifiers such as $set also support the dot notation
dbh.users.update({"facebook.username":"foofacebook"},
{"$set":{"facebook.username":"bar"}}, safe=True)

# A user document demonstrating one-to-many relationships using embedding
# Here we map multiple email addresses (along with whether or not the email
# is the user's primary email address) to a single user.
user_doc = {
"username":"foouser",
"emails":[
{
"email":"foouser1@example.com",
"primary":True
},
{
"email":"foouser2@example2.com",
"primary":False
},
{
"email":"foouser3@example3.com",
"primary":False
}
]
}

# A user document demonstrating one-to-many relationships using embedding
user_doc = {
"username":"foouser",
"emails":[
{
"email":"foouser1@example.com",
"primary":True
},
{
"email":"foouser2@example2.com",
"primary":False
},
{
"email":"foouser3@example3.com",
"primary":False
}
]
}
# Insert the user document
dbh.users.insert(user_doc, safe=True)
# Retrieve the just-inserted document via one of its many email addresses
user_doc_result = dbh.users.find_one({"emails.email":"foouser1@example.com"})
# Assert that the original user document and the query result are the same
assert user_doc == user_doc_result



# Naive method to remove an email address from a user document
# Cumbersome and has a race condition
user_doc = {
"username":"foouser",
"emails":[
{
"email":"foouser1@example.com",
"primary":True
},
{
"email":"foouser2@example2.com",
"primary":False
},
{
"email":"foouser3@example3.com",
"primary":False
}
]
}
# Insert the user document
dbh.users.insert(user_doc, safe=True)
# Retrieve the just-inserted document via username
user_doc_result = dbh.users.find_one({"username":"foouser"})
# Remove the "foouser2@example2.com" email address sub-document from the embedded list
del user_doc_result["emails"][1]
# Now write the new emails property to the database
# May cause data to be lost due to the race between read and write
dbh.users.update({"username":"foouser"},{"$set":{"emails":user_doc_result}},
safe=True)

# Atomically remove an email address from a user document race-free using the
# $pull update modifier
user_doc = {
"username":"foouser",
"emails":[
{
"email":"foouser1@example.com",
"primary":True
},
{
"email":"foouser2@example2.com",
"primary":False
},
{
"email":"foouser3@example3.com",
"primary":False
}
]
}
# Insert the user document
dbh.users.insert(user_doc, safe=True)
# Use $pull to atomically remove the "foouser2@example2.com" email sub-document
dbh.users.update({"username":"foouser"},
{"$pull":{"emails":{"email":"foouser2@example2.com"}}}, safe=True)

# Use $pull to atomically remove all email sub-documents with primary not equal to True
dbh.users.update({"username":"foouser"},
{"$pull":{"emails":{"primary":{"$ne":True}}}, safe=True)

The $push update modifier is used to atomically append an element to an array. At the
time of writing, $push can only support adding items to the end of the array—there is
no update modifier to add an element to the beginning of an array, or to insert it at an
arbitrary index. $push is simple to use, because, unlike $pull , it does not take any field
match or conditional arguments.

# Use $push to atomically append a new email sub-document to the user document
new_email = {"email":"fooemail4@exmaple4.com", "primary":False}
dbh.users.update({"username":"foouser"},
{"$push":{"emails":new_email}}, safe=True)

# Demonstrate usage of the positional operator ($) to modify
# matched sub-documents in-place.
user_doc = {
"username":"foouser",
"emails":[
{
"email":"foouser1@example.com",
"primary":True
},
{
"email":"foouser2@example2.com",
"primary":False
},
{
"email":"foouser3@example3.com",
"primary":False
}
]
}
# Insert the user document
dbh.users.insert(user_doc, safe=True)
# Now make the "foouser2@example2.com" email address primrary
dbh.users.update({"emails.email":"foouser2@example2.com"},
{"$set":{"emails.$.primary":True}}, safe=True)
# Now make the "foouser1@example.com" email address not primary
dbh.users.update({"emails.email":"foouser1@example.com {"$set":{"emails.$.primary":False}}, safe=True)

Note that the $ operator cannot be used with upserts (see section on
upserts later in this chapter) additionally it only works with the first
matched element.

The alternative to embedding is storing the documents in a separate collection and
performing a join in your own application code, by querying twice or more. Usually
many-to-many relationships are modeled in this way, while one-to-many relationships
are embedded.

For example to create an index on the username property of a collection called users ,
you could write the following:
# Create index on username property
dbh.users.create_index("username")
To create a compound index, for example on the first_name and last_name, with an
ascending direction, you could specify:
# Create a compound index on first_name and last_name properties
# with ascending index direction
dbh.users.create_index([("first_name", pymongo.ASCENDING), ("last_name",
pymongo.ASCENDING)])
Indexes in MongoDB each have names. By default, MongoDB will generate a name,
but you may wish to give a custom name—particularly for compound indexes where
the generated names are not especially readable by humans. To give a custom name
during creation, supply the name=<str> parameter to the create_index() method:
# Create a compound index called "name_idx" on first_name and last_name properties
# with ascending index direction
dbh.users.create_index([
("first_name", pymongo.ASCENDING),
("last_name", pymongo.ASCENDING)
],
name="name_idx")

pecify that an index should be built in the background, pass the background=True
parameter to the create_index() method:
# Create index in the background
# Database remains usable
dbh.users.create_index("username", background=True)

==========================================================
Location-based Apps with MongoDB: GeoSpatial Indexing
==========================================================
Once the documents in your collection have their location properties correctly formed,
we can create the geospatial index. As with btree indexes, geospatial indexes in Mon-
goDB are created with PyMongo’s Collection.create_index() method. Due to the one-
geospatial-index-per-collection limitation in MongoDB versions up to and including
1.8.x, if you are planning to query by other properties in addition to the location prop-
erty, you can make your geospatial index a compound index. For exmaple, if you know
that you will be searching your collection by both “username” and “user_location”
properties, you could create a compound geo index across both fields. This can help
to work around the single geospatial index limitation in many cases.
Returning to our example of documents in a collection called “users” with the location
property being “user_location”, we would create a geospatial index with the following
statement:
# Create geospatial index on "user_location" property.
dbh.users.create_index([("user_location", pymongo.GEO2D)])
